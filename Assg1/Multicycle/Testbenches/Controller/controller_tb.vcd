$date
	Sat Sep 28 21:56:33 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module controller_tb $end
$var wire 1 ! regwrite $end
$var wire 1 " regdst $end
$var wire 2 # pcsrc [1:0] $end
$var wire 1 $ pcen $end
$var wire 1 % memwrite $end
$var wire 1 & memtoreg $end
$var wire 1 ' irwrite $end
$var wire 1 ( iord $end
$var wire 2 ) alusrcb [1:0] $end
$var wire 1 * alusrca $end
$var wire 3 + alucontrol [2:0] $end
$var reg 1 , clk $end
$var reg 2 - cz [1:0] $end
$var reg 16 . instr [15:0] $end
$var reg 4 / op [3:0] $end
$var reg 1 0 reset $end
$var reg 1 1 zero $end
$scope module uut $end
$var wire 1 , clk $end
$var wire 2 2 cz [1:0] $end
$var wire 4 3 op [3:0] $end
$var wire 1 $ pcen $end
$var wire 1 0 reset $end
$var wire 1 1 zero $end
$var wire 1 ! regwrite $end
$var wire 1 " regdst $end
$var wire 1 4 pcwrite $end
$var wire 2 5 pcsrc [1:0] $end
$var wire 1 % memwrite $end
$var wire 1 & memtoreg $end
$var wire 1 ' irwrite $end
$var wire 1 ( iord $end
$var wire 1 6 branch $end
$var wire 2 7 alusrcb [1:0] $end
$var wire 1 * alusrca $end
$var wire 2 8 aluop [1:0] $end
$var wire 3 9 alucontrol [2:0] $end
$scope module ad $end
$var wire 2 : cz [1:0] $end
$var wire 4 ; op [3:0] $end
$var reg 3 < alucontrol [2:0] $end
$upscope $end
$scope module md $end
$var wire 1 , clk $end
$var wire 4 = op [3:0] $end
$var wire 1 0 reset $end
$var wire 1 ! regwrite $end
$var wire 1 " regdst $end
$var wire 1 4 pcwrite $end
$var wire 2 > pcsrc [1:0] $end
$var wire 1 % memwrite $end
$var wire 1 & memtoreg $end
$var wire 1 ' irwrite $end
$var wire 1 ( iord $end
$var wire 1 6 branch $end
$var wire 2 ? alusrcb [1:0] $end
$var wire 1 * alusrca $end
$var wire 2 @ aluop [1:0] $end
$var parameter 4 A ADC $end
$var parameter 4 B ADD $end
$var parameter 5 C ADDIEXECUTE $end
$var parameter 5 D ADDIWRITEBACK $end
$var parameter 5 E ALUWRITEBACK $end
$var parameter 4 F BEQ $end
$var parameter 5 G BRANCH $end
$var parameter 5 H DECODE $end
$var parameter 5 I EXECUTE $end
$var parameter 5 J FETCH $end
$var parameter 4 K JAL $end
$var parameter 5 L JUMP $end
$var parameter 4 M LW $end
$var parameter 5 N MEMADR $end
$var parameter 5 O MEMRD $end
$var parameter 5 P MEMWB $end
$var parameter 5 Q MEMWR $end
$var parameter 4 R NDU $end
$var parameter 4 S NDZ $end
$var parameter 4 T SW $end
$var reg 17 U controls [16:0] $end
$var reg 5 V nextstate [4:0] $end
$var reg 5 W state [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101 T
b11 S
b10 R
b101 Q
b100 P
b11 O
b10 N
b100 M
b1011 L
b111 K
b0 J
b110 I
b1 H
b1000 G
b110 F
b111 E
b1010 D
b1001 C
b0 B
b1 A
$end
#0
$dumpvars
b0 W
b1 V
b101000000010000 U
b0 @
b1 ?
b0 >
bx =
bx <
bx ;
bx :
bx 9
b0 8
b1 7
06
b0 5
14
bx 3
bx 2
01
10
bx /
bx .
bx -
0,
bx +
0*
b1 )
0(
1'
0&
0%
1$
b0 #
0"
0!
$end
#1
1,
#2
b10 +
b10 9
b10 <
b0 -
b0 2
b0 :
b0 /
b0 3
b0 ;
b0 =
0,
b0 .
#3
1,
#4
0,
b1001000000 .
00
#5
0$
b11 )
b11 7
b11 ?
0'
04
b110000 U
b110 V
b1 W
1,
#6
bx +
bx 9
bx <
b10 V
b101 /
b101 3
b101 ;
b101 =
0,
b101010000010000 .
#7
b10 )
b10 7
b10 ?
1*
b10000100000 U
b101 V
b10 W
1,
#8
b11 V
b100 /
b100 3
b100 ;
b100 =
0,
b100010000010000 .
#9
b0 )
b0 7
b0 ?
1(
0*
b100000000 U
b100 V
b11 W
1,
#10
0,
